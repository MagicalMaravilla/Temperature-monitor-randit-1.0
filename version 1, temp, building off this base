import tkinter as tk
import random
import math

class TemperatureMonitoringSystem:
    def __init__(self, master, search_complete_callback=None, delay=250):
        """
        Initialize the TemperatureMonitoringSystem class.

        Args:
        master (tk.Tk): The main tkinter window.
        """
        self.master = master
        master.title("Temperature Monitoring System")

        self.delay = delay
        self.search_complete_callback = search_complete_callback

        self.temperatures = self.generate_temperatures()
        self.search_result = tk.StringVar()
        self.search_result.set("Enter temperature range (0-100) and press 'Search'")

        # Canvas and its frame
        self.canvas_frame = tk.Frame(master)
        self.canvas_frame.pack(side="top", padx=10, pady=(10, 5))
        self.canvas = tk.Canvas(self.canvas_frame, width=2200, height=600)
        self.canvas.pack(pady=(0, 5))

        # Control frame with controls
        self.control_frame = tk.Frame(master)
        self.control_frame.pack(side="top", fill="x", padx=1000, pady=(0, 5))

        self.lower_bound_label = tk.Label(self.control_frame, text="Lower Bound (°F):")
        self.lower_bound_label.pack(side="left")
        self.lower_bound_entry = tk.Entry(self.control_frame, width=10)  # Set fixed width
        self.lower_bound_entry.pack(side="left", padx=(0, 10))

        self.upper_bound_label = tk.Label(self.control_frame, text="Upper Bound (°F):")
        self.upper_bound_label.pack(side="left")
        self.upper_bound_entry = tk.Entry(self.control_frame, width=10)  # Set fixed width
        self.upper_bound_entry.pack(side="left", padx=(0, 10))

        self.search_button = tk.Button(self.control_frame, text="Search", command=self.search, width=10)
        self.search_button.pack(side="left", padx=(10, 5))

        self.reset_button = tk.Button(self.control_frame, text="Reset", command=self.reset, width=10)
        self.reset_button.pack(side="left", padx=(5, 10))

        # Result frame with result label
        self.result_frame = tk.Frame(master, width=400)
        self.result_frame.pack(side="top", fill="x", padx=10, pady=(0, 10))
        self.result_label = tk.Label(self.result_frame, textvariable=self.search_result, justify="center", wraplength=390)
        self.result_label.pack(fill="both", expand=True)

        self.draw_axes()
        self.draw_bars()

    def generate_temperatures(self):
        """
        Generate a list of temperatures for each day of the year.

        The temperatures are simulated using a sine wave pattern to represent seasonal variations.

        Returns:
        list: A list of temperatures for each day of the year.
        """
        temperatures = []
        for day in range(1, 366):
            # Simulate seasonal temperature variations using a sine wave pattern
            average_temp = 70 + 30 * math.sin((day - 80) * 2 * math.pi / 365)
            temperature = random.gauss(average_temp, 10)  # Add some random variation
            temperatures.append(max(0, min(100, int(temperature))))  # Clamp values to [0, 100]
        return temperatures

    def draw_axes(self):
        """
        Draw the axes on the canvas for the temperature graph.
        """
        self.canvas.create_line(60, 0, 60, 600, arrow="last")  # Y-axis
        self.canvas.create_line(60, 540, 1460, 540, arrow="last")  # X-axis
        self.canvas.create_text(30, 10, text="Temp (°F)")
        self.canvas.create_text(1440, 555, text="Days")

        # Y-axis labels
        for i in range(0, 101, 20):
            y = 540 - (i * 5)
            self.canvas.create_text(50, y, text=str(i), anchor="e")
            self.canvas.create_line(60, y, 1460, y, fill="lightgrey", dash=(2, 2))

    def draw_bars(self):
        """
        Draw the bars on the canvas representing the temperatures for each day of the year.
        """
        self.canvas.delete("bar")  # Clear existing bars
        self.bar_ids = []  # Clear the list of bar IDs
        bar_width = 4
        spacing = 1
        for i, temperature in enumerate(self.temperatures):
            scaled_temp = temperature * 5  # Scale temperature for better visualization
            bar_id = self.canvas.create_rectangle(60 + i * (bar_width + spacing), 540, 60 + i * (bar_width + spacing) + bar_width, 540 - scaled_temp, fill="blue", tags="bar")
            self.bar_ids.append(bar_id)  # Store the bar ID

    def search(self, delay=None):
        """
        Search for temperatures within a specified range and highlight the corresponding bars.

        The search results are displayed in the result label.
        """
        lower_bound = self.lower_bound_entry.get()
        upper_bound = self.upper_bound_entry.get()

        if not lower_bound.isdigit() or not upper_bound.isdigit() or int(lower_bound) < 0 or int(
                upper_bound) > 100 or int(lower_bound) > int(upper_bound):
            self.search_result.set("Please enter valid temperature bounds (0-100)")
            if hasattr(self, 'search_complete_callback') and self.search_complete_callback is not None:
                self.search_complete_callback()
            return

        lower_bound, upper_bound = int(lower_bound), int(upper_bound)
        self.found_days = [(i, temp) for i, temp in enumerate(self.temperatures, start=1) if
                           lower_bound <= temp <= upper_bound]
        self.search_index = 0
        self.average_temp_sum = 0
        self.match_count = 0

        self.canvas.itemconfig("bar", fill="blue")  # Reset all bars to blue
        self.highlight_next(self.delay if delay is None else delay)

        # At the end of the search method, check if the callback is set and call it
        if hasattr(self, 'search_complete_callback') and self.search_complete_callback is not None:
            self.search_complete_callback()

    def highlight_bars(self, days):
        """
        Highlight the next bar in the search results.

        This method is called recursively with a delay to highlight each bar one by one.
        """
        self.canvas.itemconfig("bar", fill="blue")  # Reset all bars to blue
        for day in days:
            self.canvas.itemconfig(self.bar_ids[day - 1], fill="yellow")  # Highlight the selected bars as yellow (candidate)
            self.master.after(250, lambda day=day: self.finalize_highlight(day))  # Wait for 250ms before finalizing the highlight

    def highlight_next(self, delay):
        if self.search_index < len(self.found_days):
            day, temp = self.found_days[self.search_index]
            self.canvas.itemconfig(self.bar_ids[day - 1],
                                   fill="yellow")  # Highlight the selected bar as yellow (candidate)
            self.average_temp_sum += temp
            self.match_count += 1
            self.search_result.set(f"Checking Day: {day}, Temp: {temp}°F")
            self.search_index += 1
            self.master.after(delay,
                              lambda: self.highlight_next(delay))  # Wait for 'delay' ms before moving to the next
        else:
            if self.match_count > 0:
                average_temp = self.average_temp_sum / self.match_count
                self.search_result.set(
                    f"Temperatures between {self.lower_bound_entry.get()}°F and {self.upper_bound_entry.get()}°F found on {self.match_count} days.\n"
                    f"The combined average temperature during that time was {average_temp:.2f} degrees F.")
            else:
                self.canvas.itemconfig("bar", fill="red")  # Highlight all bars in red if not found
                self.search_result.set(
                    f"No temperatures found between {self.lower_bound_entry.get()}°F and {self.upper_bound_entry.get()}°F")

            if self.search_complete_callback:
                self.master.after(delay,
                                  self.search_complete_callback)  # Schedule the callback to be called after 'delay' ms

    def process_highlight(self):
        """
        Process the highlighting of bars for the search results.
        """
        if self.search_index < len(self.found_days):
            day, temp = self.found_days[self.search_index]
            self.canvas.itemconfig(self.bar_ids[day - 1], fill="yellow")
            self.average_temp_sum += temp
            self.match_count += 1
            self.search_result.set(f"Checking Day: {day}, Temp: {temp}°F")
            self.search_index += 1
        else:
            if self.match_count > 0:
                average_temp = self.average_temp_sum / self.match_count
                self.search_result.set(
                    f"Temperatures between {self.lower_bound_entry.get()}°F and {self.upper_bound_entry.get()}°F found on {self.match_count} days.\n"
                    f"The combined average temperature during that time was {average_temp:.2f} degrees F.")
            else:
                self.canvas.itemconfig("bar", fill="red")
                self.search_result.set(
                    f"No temperatures found between {self.lower_bound_entry.get()}°F and {self.upper_bound_entry.get()}°F")

    def reset(self):
        """
        Reset the canvas and search results.

        All bars are reset to their original color and the search result label is cleared.
        """
        # Reset all bars to blue without regenerating the temperature data
        self.canvas.itemconfig("bar", fill="blue")
        self.search_result.set("Enter temperature range (0-100) and press 'Search'")

    def finalize_highlight(self, day):
        """
        Finalize the highlight for a specific day.

        Args:
        day (int): The day to finalize the highlight for.
        """
        self.canvas.itemconfig(self.bar_ids[day - 1], fill="green")  # Highlight in green when found


if __name__ == "__main__":
    root = tk.Tk()
    app = TemperatureMonitoringSystem(root)
    root.geometry("1480x650")
    root.mainloop()
